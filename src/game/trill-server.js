// Generated by CoffeeScript 1.7.1
var $log, GameInstance, Player, gameId, gameInstances, getGameInstance, getNextWaitingGame, hasWaitingGame, players, socketio;

socketio = require('socket.io');

$log = require('util').log;

gameId = 1;

players = [];

gameInstances = [];

exports.listen = function(server) {
  var io;
  io = socketio.listen(server);
  io.set('log level', 1);
  io.sockets.on('connection', function(socket) {
    return getGameInstance(socket);
  });
  return setInterval((function() {
    var waitingGames;
    if ((waitingGames = hasWaitingGame())) {
      return $log("There are currently waiting game");
    }
  }), 1000);
};

hasWaitingGame = function() {
  return (gameInstances.filter(function(game) {
    return game.isWaiting();
  })).length !== 0;
};

getGameInstance = function(socket) {
  var instance, p;
  p = new Player(socket.id);
  if ((instance = getNextWaitingGame()) === void 0) {
    instance = new GameInstance(gameId++);
  }
  instance.assignPlayerToGame(p);
  return gameInstances.push(instance);
};

getNextWaitingGame = function() {
  var gameInstance, _i, _len;
  for (_i = 0, _len = gameInstances.length; _i < _len; _i++) {
    gameInstance = gameInstances[_i];
    if (gameInstance.isWaiting()) {
      return gameInstance;
    }
  }
};

Player = (function() {
  function Player(socketId, gameInstance) {
    this.socketId = socketId;
    this.gameInstance = gameInstance;
  }

  Player.prototype.id = Player.socketId;

  return Player;

})();

GameInstance = (function() {
  function GameInstance(id, playerOne, playerTwo) {
    this.id = id;
    this.playerOne = playerOne;
    this.playerTwo = playerTwo;
  }

  GameInstance.prototype.isWaiting = function() {
    return this.playerOne === void 0 || this.playerTwo === void 0;
  };

  GameInstance.prototype.isEmpty = function() {
    return this.playerOne === void 0 && this.playerTwo === void 0;
  };

  GameInstance.prototype.isFull = function() {
    return this.playerOne !== void 0 && this.playerTwo !== void 0;
  };

  GameInstance.prototype.assignPlayerToGame = function(player) {
    console.log("Assigning " + player.socketId + " to a game instance " + this.id);
    if (this.playerOne === void 0) {
      return this.playerOne = player;
    } else if (this.playerTwo === void 0) {
      return this.playerTwo = player;
    } else {
      throw "Cannot assign player to an none empty game instance";
    }
  };

  return GameInstance;

})();

//# sourceMappingURL=trill-server.map
